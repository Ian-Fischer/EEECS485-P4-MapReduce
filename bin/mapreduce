#!/bin/bash
# mapreduce

# stop on errors
set -Eeuo pipefail
# set -x

usage() {
    echo "Usage: $0 (start|stop|status)"
}

if [ $# -ne 1 ]; then
    usage
    exit
fi 

# exit 1 if Manager or Worker is already running
case $1 in 
    "start")
        if pgrep -f mapreduce-manager &> /dev/null;  
        then
            echo "Error: mapreduce-manager is already running"
            exit 1
        elif pgrep -f mapreduce-worker &> /dev/null; 
        then
            echo "Error: mapreduce-worker is already running"
            exit 1
        else
            echo "starting mapreduce ..."
            mapreduce-manager --host localhost --port 6000 --hb-port 5999 &
            sleep 2
            mapreduce-worker --host localhost --port 6001 --manager-host localhost --manager-port 6000 --manager-hb-port 5999 &
            mapreduce-worker --host localhost --port 6002 --manager-host localhost --manager-port 6000 --manager-hb-port 5999 &
        fi
        ;;
    "stop")
        # Detect GNU vs BSD netcat. We need netcat to close the connection after
        # sending a message, which requires different options.
        echo "stopping mapreduce ..."
        set +o pipefail  # Avoid erroneous failures due to grep returning non-zero
        if nc -h 2>&1 | grep -q "\-c"; then
            NC="nc -c"
        elif nc -h 2>&1 | grep -q "\-N"; then
            NC="nc -N"
        elif nc -h 2>&1 | grep -q "\-C"; then
            NC="nc -C"
        else
        echo "Error detecting netcat version."
        exit 1
        fi
        set -o pipefail
        echo '{"message_type": "shutdown"}' | $NC localhost 6000 || true
        sleep 2  # give the manager time to receive signal and send to workers
        
        if pgrep -f mapreduce-manager &> /dev/null; then
            echo "killing mapreduce manager ..."
            pkill -f mapreduce-manager || true
        fi
        if pgrep -f mapreduce-worker &> /dev/null; then
            echo "killing mapreduce worker ..."
            pkill -f mapreduce-worker || true
        fi
        ;;
    "status")
        if pgrep -f mapreduce-manager &> /dev/null && pgrep -f mapreduce-worker &> /dev/null; 
        then
            echo "manager running"
            echo "workers running"
            exit 0
        elif pgrep -f mapreduce-manager &> /dev/null;
        then
            echo "manager running"
            echo "workers not running"
            exit 1
        elif pgrep -f mapreduce-worker &> /dev/null;
        then
            echo "manager not running"
            echo "workers running"
            exit 1
        else
            echo "manager not running"
            echo "workers not running"
            exit 1
        fi
        ;;
    "restart")
        mapreduce stop
        mapreduce start
        ;;

    *)
        usage
        exit 1
    ;;
esac